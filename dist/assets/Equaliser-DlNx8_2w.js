import{r as y,j as s}from"./index-Unzykuk8.js";import{T as d,o as w,P as m,a as v,G as p,S as f,r as F,c as S,w as _,i as N,b as A,p as C,s as D}from"./stop-circle-DqqeZ05H.js";import{s as G,g as E,b as T,d as B,p as L,v as O}from"./VOCAL WITH VERB-DVYifobt.js";class x extends d{constructor(){const e=w(x.getDefaults(),arguments,["frequency","type"]);super(e),this.name="BiquadFilter",this._filter=this.context.createBiquadFilter(),this.input=this.output=this._filter,this.Q=new m({context:this.context,units:"number",value:e.Q,param:this._filter.Q}),this.frequency=new m({context:this.context,units:"frequency",value:e.frequency,param:this._filter.frequency}),this.detune=new m({context:this.context,units:"cents",value:e.detune,param:this._filter.detune}),this.gain=new m({context:this.context,units:"decibels",convert:!1,value:e.gain,param:this._filter.gain}),this.type=e.type}static getDefaults(){return Object.assign(d.getDefaults(),{Q:1,type:"lowpass",frequency:350,detune:0,gain:0})}get type(){return this._filter.type}set type(e){v(["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(e)!==-1,`Invalid filter type: ${e}`),this._filter.type=e}getFrequencyResponse(e=128){const n=new Float32Array(e);for(let o=0;o<e;o++){const r=Math.pow(o/e,2)*19980+20;n[o]=r}const t=new Float32Array(e),u=new Float32Array(e),c=this.context.createBiquadFilter();return c.type=this.type,c.Q.value=this.Q.value,c.frequency.value=this.frequency.value,c.gain.value=this.gain.value,c.getFrequencyResponse(n,t,u),t}dispose(){return super.dispose(),this._filter.disconnect(),this.Q.dispose(),this.frequency.dispose(),this.gain.dispose(),this.detune.dispose(),this}}class g extends d{constructor(){const e=w(g.getDefaults(),arguments,["frequency","type","rolloff"]);super(e),this.name="Filter",this.input=new p({context:this.context}),this.output=new p({context:this.context}),this._filters=[],this._filters=[],this.Q=new f({context:this.context,units:"positive",value:e.Q}),this.frequency=new f({context:this.context,units:"frequency",value:e.frequency}),this.detune=new f({context:this.context,units:"cents",value:e.detune}),this.gain=new f({context:this.context,units:"decibels",convert:!1,value:e.gain}),this._type=e.type,this.rolloff=e.rolloff,F(this,["detune","frequency","gain","Q"])}static getDefaults(){return Object.assign(d.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})}get type(){return this._type}set type(e){v(["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(e)!==-1,`Invalid filter type: ${e}`),this._type=e,this._filters.forEach(t=>t.type=e)}get rolloff(){return this._rolloff}set rolloff(e){const n=N(e)?e:parseInt(e,10),t=[-12,-24,-48,-96];let u=t.indexOf(n);v(u!==-1,`rolloff can only be ${t.join(", ")}`),u+=1,this._rolloff=n,this.input.disconnect(),this._filters.forEach(c=>c.disconnect()),this._filters=new Array(u);for(let c=0;c<u;c++){const o=new x({context:this.context});o.type=this._type,this.frequency.connect(o.frequency),this.detune.connect(o.detune),this.Q.connect(o.Q),this.gain.connect(o.gain),this._filters[c]=o}this._internalChannels=this._filters,S(this.input,...this._internalChannels,this.output)}getFrequencyResponse(e=128){const n=new x({frequency:this.frequency.value,gain:this.gain.value,Q:this.Q.value,type:this._type,detune:this.detune.value}),t=new Float32Array(e).map(()=>1);return this._filters.forEach(()=>{n.getFrequencyResponse(e).forEach((c,o)=>t[o]*=c)}),n.dispose(),t}dispose(){return super.dispose(),this._filters.forEach(e=>{e.dispose()}),_(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this}}class b extends d{constructor(){const e=w(b.getDefaults(),arguments,["lowFrequency","highFrequency"]);super(e),this.name="MultibandSplit",this.input=new p({context:this.context}),this.output=void 0,this.low=new g({context:this.context,frequency:0,type:"lowpass"}),this._lowMidFilter=new g({context:this.context,frequency:0,type:"highpass"}),this.mid=new g({context:this.context,frequency:0,type:"lowpass"}),this.high=new g({context:this.context,frequency:0,type:"highpass"}),this._internalChannels=[this.low,this.mid,this.high],this.lowFrequency=new f({context:this.context,units:"frequency",value:e.lowFrequency}),this.highFrequency=new f({context:this.context,units:"frequency",value:e.highFrequency}),this.Q=new f({context:this.context,units:"positive",value:e.Q}),this.input.fan(this.low,this.high),this.input.chain(this._lowMidFilter,this.mid),this.lowFrequency.fan(this.low.frequency,this._lowMidFilter.frequency),this.highFrequency.fan(this.mid.frequency,this.high.frequency),this.Q.connect(this.low.Q),this.Q.connect(this._lowMidFilter.Q),this.Q.connect(this.mid.Q),this.Q.connect(this.high.Q),F(this,["high","mid","low","highFrequency","lowFrequency"])}static getDefaults(){return Object.assign(d.getDefaults(),{Q:1,highFrequency:2500,lowFrequency:400})}dispose(){return super.dispose(),_(this,["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this._lowMidFilter.dispose(),this.mid.dispose(),this.high.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this.Q.dispose(),this}}class j extends d{constructor(){const e=w(j.getDefaults(),arguments,["low","mid","high"]);super(e),this.name="EQ3",this.output=new p({context:this.context}),this._internalChannels=[],this.input=this._multibandSplit=new b({context:this.context,highFrequency:e.highFrequency,lowFrequency:e.lowFrequency}),this._lowGain=new p({context:this.context,gain:e.low,units:"decibels"}),this._midGain=new p({context:this.context,gain:e.mid,units:"decibels"}),this._highGain=new p({context:this.context,gain:e.high,units:"decibels"}),this.low=this._lowGain.gain,this.mid=this._midGain.gain,this.high=this._highGain.gain,this.Q=this._multibandSplit.Q,this.lowFrequency=this._multibandSplit.lowFrequency,this.highFrequency=this._multibandSplit.highFrequency,this._multibandSplit.low.chain(this._lowGain,this.output),this._multibandSplit.mid.chain(this._midGain,this.output),this._multibandSplit.high.chain(this._highGain,this.output),F(this,["low","mid","high","lowFrequency","highFrequency"]),this._internalChannels=[this._multibandSplit]}static getDefaults(){return Object.assign(d.getDefaults(),{high:0,highFrequency:2500,low:0,lowFrequency:400,mid:0})}dispose(){return super.dispose(),_(this,["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this._lowGain.dispose(),this._midGain.dispose(),this._highGain.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.Q.dispose(),this}}const Q=[{noteAllocation:"C4",fileLocation:G,sampleTitle:"Sunshine"},{noteAllocation:"D4",fileLocation:E,sampleTitle:"Guitar"},{noteAllocation:"E4",fileLocation:T,sampleTitle:"Bass"},{noteAllocation:"F4",fileLocation:B,sampleTitle:"Drums"},{noteAllocation:"G4",fileLocation:L,sampleTitle:"Piano"},{noteAllocation:"A5",fileLocation:O,sampleTitle:"Vocals"}],P=()=>{const[q,e]=y.useState(!1),n=y.useRef(null),t=y.useRef(null);y.useEffect(()=>(n.current=new A(Object.fromEntries(Q.map(i=>[i.noteAllocation,i.fileLocation])),{onload:()=>{e(!0)}}),t.current=new j({low:1,mid:1,high:1,lowFrequency:400,highFrequency:2500}).toDestination(),n.current&&t.current&&n.current.connect(t.current),()=>{n.current&&n.current.dispose(),t.current&&t.current.dispose()}),[]);const u=i=>{q&&n.current&&n.current.triggerAttack(i)},c=i=>{n.current&&n.current.triggerRelease(i)},o=(i,r,a,l,h)=>{t.current&&(t.current.low.value=i,t.current.mid.value=r,t.current.high.value=a,t.current.lowFrequency.value=l,t.current.highFrequency.value=h)};return s.jsxs("div",{children:[s.jsx("h1",{children:"Equalizer"}),s.jsx("p",{className:"blurb",children:"This allows you to boost different parts of a sound, separated into low frequencies, mid frequencies and high frequencies"}),s.jsxs("div",{className:"audioComponentDisplay",children:[s.jsx("div",{className:"playerButtonBox",children:s.jsx("div",{children:Q.map(i=>s.jsxs("div",{className:"playerButtonBox",children:[s.jsx("h2",{className:"sampleTitle",children:i.sampleTitle}),s.jsx("div",{onClick:()=>q&&u(i.noteAllocation),children:s.jsx("img",{src:C,alt:"Play",className:"buttons"})}),s.jsx("div",{onClick:()=>q&&c(i.noteAllocation),children:s.jsx("img",{src:D,alt:"Stop",className:"buttons"})})]},i.noteAllocation))})}),s.jsxs("div",{className:"paramDials",children:[s.jsxs("div",{className:"buttonSection",children:[s.jsxs("label",{children:["Low: ",s.jsx("br",{}),s.jsx("input",{type:"range",min:"-10",max:"10",step:"0.3",defaultValue:"0",onChange:i=>{var r,a,l,h;return o(parseFloat(i.target.value),((r=t.current)==null?void 0:r.mid.value)||0,((a=t.current)==null?void 0:a.high.value)||0,((l=t.current)==null?void 0:l.lowFrequency.value)||400,((h=t.current)==null?void 0:h.highFrequency.value)||2500)}})]}),s.jsx("div",{className:"explainer",children:"Used to give sounds more weight, too much can sound boomy"})]}),s.jsxs("div",{className:"buttonSection",children:[s.jsxs("label",{children:["Frequency selector: ",s.jsx("br",{}),s.jsx("input",{type:"range",min:"60",max:"1000",step:"1",defaultValue:"0",onChange:i=>{var r,a,l,h;return o(((r=t.current)==null?void 0:r.low.value)||0,((a=t.current)==null?void 0:a.mid.value)||0,((l=t.current)==null?void 0:l.high.value)||0,parseFloat(i.target.value),((h=t.current)==null?void 0:h.highFrequency.value)||2500)}})]}),s.jsx("div",{className:"explainer",children:'Higher will sound more "chesty", lower for deeper sound'})]}),s.jsxs("div",{className:"buttonSection",children:[s.jsxs("label",{children:["Mid: ",s.jsx("br",{}),s.jsx("input",{type:"range",min:"-10",max:"10",step:"0.3",defaultValue:"0",onChange:i=>{var r,a,l,h;return o(((r=t.current)==null?void 0:r.low.value)||0,parseFloat(i.target.value),((a=t.current)==null?void 0:a.high.value)||0,((l=t.current)==null?void 0:l.lowFrequency.value)||400,((h=t.current)==null?void 0:h.highFrequency.value)||2500)}})]}),s.jsx("div",{className:"explainer",children:"Used for more definition, too much can sound grating"})]}),s.jsxs("div",{className:"buttonSection",children:[s.jsxs("label",{children:["High: ",s.jsx("br",{}),s.jsx("input",{type:"range",min:"-10",max:"10",step:"0.3",defaultValue:"0",onChange:i=>{var r,a,l,h;return o(((r=t.current)==null?void 0:r.low.value)||0,((a=t.current)==null?void 0:a.mid.value)||0,parseFloat(i.target.value),((l=t.current)==null?void 0:l.lowFrequency.value)||400,((h=t.current)==null?void 0:h.highFrequency.value)||2500)}})]}),s.jsx("div",{className:"explainer",children:"Used for clarity and air in sound"})]}),s.jsxs("div",{className:"buttonSection",children:[s.jsxs("label",{children:["High Frequency: ",s.jsx("br",{}),s.jsx("input",{type:"range",min:"1000",max:"20000",step:"1",defaultValue:"0",onChange:i=>{var r,a,l,h;return o(((r=t.current)==null?void 0:r.low.value)||0,((a=t.current)==null?void 0:a.mid.value)||0,((l=t.current)==null?void 0:l.high.value)||0,((h=t.current)==null?void 0:h.lowFrequency.value)||400,parseFloat(i.target.value))}})]}),s.jsx("div",{className:"explainer",children:"Higher will sound more airy, lower for definition"})]})]})]})]})};export{P as default};
